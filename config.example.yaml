# Beispiel-Konfiguration für DynDNS Docker Client
# Kopiere diese Datei zu config/config.yaml und passe sie an deine Bedürfnisse an!

# Intervall in Sekunden für die IP-Prüfung (z.B. alle 5 Minuten)
timer: 300

# Protokollierungsstufe
loglevel: INFO   # Mögliche Werte: DEBUG, INFO, WARNING, ERROR, CRITICAL

# Service zum Abrufen der öffentlichen IPv4-Adresse
ip_service: "https://api.ipify.org"

# Service zum Abrufen der öffentlichen IPv6-Adresse (optional)
# ip6_service: "https://api64.ipify.org"

# Benachrichtigungen (alle Optionen, alles optional)
notify:
# Bei notify_on: gibt es mehrere möglichkeiten:     notify_on: ["ERROR", "CRITICAL", "UPDATE"]
  # E-Mail
  email:
    enabled: enable
    to: "dein@email.tld"
    from: "dyndns-bot@email.tld"
    smtp_server: "smtp.example.com"
    smtp_port: 587           # Standard: 587 (STARTTLS), 465 (SSL), 25 (kein SSL)
#    smtp_ssl: false          # Muss nicht gesetzt werden: true = SSL (Port 465), false = kein SSL/STARTTLS
#    smtp_starttls: true      # Muss nicht gesetzt werden: true = STARTTLS (Port 587), false = kein STARTTLS
    smtp_user: "smtp-user"
    smtp_pass: "smtp-pass"
    notify_on: ["ERROR", "CRITICAL", "UPDATE"]

  # ntfy Push
  ntfy:
    enabled: enable
    url: "https://ntfy.sh/dein-topic"
    notify_on: ["ERROR", "CRITICAL"]

  # Webhook (z.B. für eigene HTTP-Services)
  webhook:
    enabled: enable
    url: "https://your-webhook-service"
    notify_on: ["ERROR", "CRITICAL", "UPDATE"]

  # Telegram
  telegram:
    enabled: enable
    bot_token: "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
    chat_id: "123456789"
    notify_on: ["ERROR", "CRITICAL"]

  # Discord
  discord:
    enabled: enable
    webhook_url: "https://discord.com/api/webhooks/..."
    notify_on: ["ERROR", "CRITICAL"]

  # Slack
  slack:
    enabled: enable
    webhook_url: "https://hooks.slack.com/services/..."
    notify_on: ["ERROR", "CRITICAL"]

# Liste der zu aktualisierenden Provider
providers:
  # DuckDNS Beispiel
  - name: duckdns
    protocol: dyndns2
    url: "https://www.duckdns.org/update"
    token: "your-duckdns-token"
    domain: "example"  # DuckDNS erwartet 'domain'

  # NoIP Beispiel
  - name: noip-home
    protocol: dyndns2
    url: "https://dynupdate.no-ip.com/nic/update"
    username: "your-noip-username"
    password: "your-noip-password"
    hostname: "example.ddns.net"  # NoIP erwartet 'hostname'

  # Dynu Beispiel
  - name: dynu
    protocol: dyndns2
    url: "https://api.dynu.com/nic/update"
    auth_method: "basic"
    username: "deinuser"
    password: "deinpass"
    hostname: "deinedomain.dynu.net"  # Dynu erwartet 'hostname'

  # Cloudflare Beispiel (IPv4 und IPv6)
  - name: mein-cloudflare
    protocol: cloudflare
    zone: "deinedomain.tld"
    api_token: "dein_cloudflare_api_token"
    record_name: "sub.domain.tld"

  # ipv64.net Beispiel (Token)
  - name: mein-ipv64
    protocol: ipv64
    # url ist NICHT nötig für ipv64, wird im Code fest gesetzt!
    auth_method: "token"  # oder "basic" oder "bearer"
    token: "dein_update_token"
    domain: "deinedomain.ipv64.net"

  # ipv64.net Beispiel (Basic Auth)
  - name: mein-ipv64-basic
    protocol: ipv64
    auth_method: "basic"
    token: "dein_update_token"
    domain: "deinedomain.ipv64.net"

  # ipv64.net Beispiel (Bearer Auth)
  - name: mein-ipv64-bearer
    protocol: ipv64
    auth_method: "bearer"
    token: "dein_update_token"
    domain: "deinedomain.ipv64.net"

  # dyndns2 Beispiel mit Bearer Auth
  - name: beispiel-bearer
    protocol: dyndns2
    url: "https://example.com/nic/update"
    auth_method: "bearer"
    token: "dein_bearer_token"
    hostname: "deinhost.example.com"

  # dyndns2 Beispiel mit host statt hostname/domain
  - name: beispiel-mit-host
    protocol: dyndns2
    url: "https://example.com/nic/update"
    token: "dein_token"
    host: "deinhost.example.com"

# Hinweise:
# - Für dyndns2-Provider ist das Feld 'url' Pflicht!
# - Für cloudflare und ipv64 ist die URL im Code fest hinterlegt.
# - Je nach Provider werden die Felder 'domain', 'hostname' oder 'host' benötigt.
# - auth_method kann "token", "basic" oder "bearer" sein (je nach Provider/API).
