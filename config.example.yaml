# Example configuration for DynDNS Docker Client
# Copy this file to config/config.yaml and adjust it to your needs!

# Interval in seconds for IP checks (e.g. every 5 minutes)
timer: 300

# Logging level
loglevel: INFO   # Possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL

# Service to fetch the public IPv4 address
ip_service: "https://api.ipify.org"
# Or use a local network interface instead:
# interface: "eth0"

# Service to fetch the public IPv6 address (optional)
# ip6_service: "https://api64.ipify.org"
# Or use a local network interface instead:
# interface6: "eth0"

skip_update_on_startup: true  # If true, no provider updates will be performed on container start if the IP has not changed.
# If false or not set, an update will always be performed on startup, even if the IP is the same.

# Notifications (all options optional)
notify:
  reset_cooldown_on_start: true  # Cooldown timers are reset on container start
#  reset_cooldown_on_start: false  # Cooldown timers are not reset on container start

  # E-Mail
  email:
    enabled: true
    to: "your@email.tld"
    from: "dyndns-bot@email.tld"
    smtp_server: "smtp.example.com"
    smtp_port: 587           # Default: 587 (STARTTLS), 465 (SSL), 25 (no SSL)
#    smtp_ssl: false          # Not required: true = SSL (port 465), false = no SSL/STARTTLS
#    smtp_starttls: true      # Not required: true = STARTTLS (port 587), false = no STARTTLS
    smtp_user: "smtp-user"
    smtp_pass: "smtp-pass"
    notify_on: ["ERROR", "CRITICAL", "UPDATE"]
    cooldown: 30  # Cooldown in minutes for email

  # ntfy Push
  ntfy:
    enabled: true
    url: "https://ntfy.sh/your-topic"
    notify_on: ["ERROR", "CRITICAL"]
    cooldown: 10  # Cooldown in minutes for ntfy

  # Webhook (e.g. for custom HTTP services)
  webhook:
    enabled: true
    url: "https://your-webhook-service"
    notify_on: ["ERROR", "CRITICAL", "UPDATE"]
    cooldown: 5

  # Telegram
  telegram:
    enabled: true
    bot_token: "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
    chat_id: "123456789"
    notify_on: ["ERROR", "CRITICAL"]
    cooldown: 20

  # Discord
  discord:
    enabled: true
    webhook_url: "https://discord.com/api/webhooks/..."
    notify_on: ["ERROR", "CRITICAL"]
    cooldown: 0  # No cooldown for Discord

  # Slack
  slack:
    enabled: true
    webhook_url: "https://hooks.slack.com/services/..."
    notify_on: ["ERROR", "CRITICAL"]
    cooldown: 15

# List of providers to update
providers:
  # DuckDNS example
  - name: duckdns
    protocol: dyndns2
    url: "https://www.duckdns.org/update"
    token: "your-duckdns-token"
    domain: "example"  # DuckDNS expects 'domain'

  # NoIP example
  - name: noip-home
    protocol: dyndns2
    url: "https://dynupdate.no-ip.com/nic/update"
    username: "your-noip-username"
    password: "your-noip-password"
    hostname: "example.ddns.net"  # NoIP expects 'hostname'

  # Dynu example
  - name: dynu
    protocol: dyndns2
    url: "https://api.dynu.com/nic/update"
    auth_method: "basic"
    username: "youruser"
    password: "yourpass"
    hostname: "yourdomain.dynu.net"  # Dynu expects 'hostname'

  # Cloudflare example (IPv4 and IPv6)
  - name: my-cloudflare
    protocol: cloudflare
    zone: "yourdomain.tld"
    api_token: "your_cloudflare_api_token"
    record_name: "sub.domain.tld"

  # ipv64.net example (Token)
  - name: my-ipv64
    protocol: ipv64
    # url is NOT needed for ipv64, it is hardcoded in the code!
    auth_method: "token"  # or "basic" or "bearer"
    token: "your_update_token"
    domain: "yourdomain.ipv64.net"

  # ipv64.net example (Basic Auth)
  - name: my-ipv64-basic
    protocol: ipv64
    auth_method: "basic"
    token: "your_update_token"
    domain: "yourdomain.ipv64.net"

  # ipv64.net example (Bearer Auth)
  - name: my-ipv64-bearer
    protocol: ipv64
    auth_method: "bearer"
    token: "your_update_token"
    domain: "yourdomain.ipv64.net"

  # dyndns2 example with Bearer Auth
  - name: example-bearer
    protocol: dyndns2
    url: "https://example.com/nic/update"
    auth_method: "bearer"
    token: "your_bearer_token"
    hostname: "yourhost.example.com"

  # dyndns2 example with host instead of hostname/domain
  - name: example-with-host
    protocol: dyndns2
    url: "https://example.com/nic/update"
    token: "your_token"
    host: "yourhost.example.com"

# Notes:
# - For dyndns2 providers, the 'url' field is required!
# - For cloudflare and ipv64, the URL is hardcoded in the code.
# - Depending on the provider, the fields 'domain', 'hostname', or 'host' are required.
# - auth_method can be "token", "basic", or "bearer" (depending on provider/API).
