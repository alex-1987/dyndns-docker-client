name: Provider Architecture Tests

on:
  push:
    branches: [ main, beta, develop ]
  pull_request:
    branches: [ main, beta ]
  workflow_dispatch:

jobs:
  test-suite:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi
    
    - name: Run unit tests
      run: |
        echo "🧪 Running Unit Tests"
        echo "===================="
        python -m pytest tests/ -v --tb=short
    
    - name: Test configuration validation
      run: |
        echo "� Testing Configuration Validation"
        echo "==================================="
        python -c "
        import yaml
        import sys
        sys.path.insert(0, '.')
        from update_dyndns import create_provider
        
        # Test with example config
        with open('config/config.example.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        print('✅ Example config loaded successfully')
        
        # Test provider creation with mock data
        test_providers = [
            {'name': 'test-cf', 'protocol': 'cloudflare', 'zone': 'example.com', 'api_token': 'test', 'record_name': 'sub.example.com'},
            {'name': 'test-ipv64', 'protocol': 'ipv64', 'auth_method': 'token', 'token': 'test', 'domain': 'example.com'},
            {'name': 'test-dyndns2', 'protocol': 'dyndns2', 'url': 'https://example.com/api/', 'auth_method': 'basic', 'username': 'test', 'password': 'test', 'hostname': 'test.example.com'}
        ]
        
        for provider_config in test_providers:
            try:
                provider = create_provider(provider_config)
                print(f'✅ Created {provider_config[\"name\"]}: {type(provider).__name__}')
            except Exception as e:
                print(f'❌ Failed to create {provider_config[\"name\"]}: {e}')
                sys.exit(1)
        
        print('🎉 Configuration tests passed!')
        "

  security-and-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety flake8
    
    - name: Code quality check
      run: |
        echo "📋 Code Quality Check"
        echo "===================="
        flake8 --max-line-length=120 --ignore=E501,W503 *.py || true
    
    - name: Security scan
      run: |
        echo "🔒 Security Scan"
        echo "==============="
        bandit -r . -x tests/ --severity-level medium || true
        safety check || true

  docker-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test Docker build
      run: |
        echo "� Testing Docker Build"
        echo "======================"
        docker build -t dyndns-test .
        echo "✅ Docker build successful"
    
    - name: Test Docker run (dry-run)
      run: |
        echo "🚀 Testing Docker Run"
        echo "===================="
        # Create minimal test config
        mkdir -p test-config
        cat > test-config/config.yaml << EOF
        timer: 300
        loglevel: INFO
        providers: []
        EOF
        
        # Test container startup (should exit quickly with empty providers)
        timeout 10s docker run --rm \
          -v $(pwd)/test-config:/app/config \
          dyndns-test || echo "✅ Container started successfully"

  results:
    runs-on: ubuntu-latest
    needs: [test-suite, security-and-quality, docker-test]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "📊 TEST EXECUTION SUMMARY"
        echo "========================="
        echo "Unit Tests: ${{ needs.test-suite.result }}"
        echo "Security & Quality: ${{ needs.security-and-quality.result }}"
        echo "Docker Tests: ${{ needs.docker-test.result }}"
        echo ""
        
        if [[ "${{ needs.test-suite.result }}" == "success" ]]; then
          echo "🎉 Core functionality tests passed!"
        else
          echo "❌ Core tests failed"
          exit 1
        fi
