name: Provider Architecture Tests

on:
  push:
    branches: [ main, beta, develop ]
  pull_request:
    branches: [ main, beta ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-providers:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
    
    - name: Run comprehensive provider tests
      run: |
        echo "🧪 Running Comprehensive Provider Test Suite"
        echo "============================================"
        if [ -f tests/test_comprehensive_providers.py ]; then
          python tests/test_comprehensive_providers.py
        else
          echo "ℹ️ Comprehensive provider tests not found, skipping..."
        fi
    
    - name: Run individual test files
      run: |
        echo "🔧 Running Individual Test Files"
        echo "================================="
        python -m pytest tests/test_basic_fixed.py -v
        python -m pytest tests/test_dyndns.py -v
        if [ -f tests/test_provider_config_mock.py ]; then
          python -m pytest tests/test_provider_config_mock.py -v
        fi
    
    - name: Test provider creation with real configs
      run: |
        echo "📝 Testing Real-World Configurations"
        echo "===================================="
        if [ -f tests/test_real_world_config.py ]; then
          python tests/test_real_world_config.py
        else
          echo "ℹ️ Real-world config tests not found, skipping..."
        fi
    
    - name: Validate notification functionality
      run: |
        echo "📧 Testing Notification Functionality"
        echo "====================================="
        if [ -f tests/test_notification_summary.py ]; then
          python tests/test_notification_summary.py
        else
          echo "ℹ️ Notification tests not found, skipping..."
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          .coverage
        retention-days: 7

  test-coverage:
    runs-on: ubuntu-latest
    needs: test-providers
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies with coverage
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        pip install coverage pytest-cov
    
    - name: Run tests with coverage
      run: |
        echo "📊 Running Coverage Analysis"
        echo "============================"
        coverage run --source=. -m pytest tests/ -v || true
        if [ -f tests/test_comprehensive_providers.py ]; then
          coverage run --append tests/test_comprehensive_providers.py || true
        fi
        coverage report -m || true
        coverage html || true
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 7

  integration-test:
    runs-on: ubuntu-latest
    needs: test-providers
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
    
    - name: Create test config
      run: |
        mkdir -p config
        cat > config/config.yaml << EOF
        timer: 300
        loglevel: INFO
        consolelevel: INFO
        providers:
          - name: test-cloudflare
            protocol: cloudflare
            zone: example.com
            api_token: test_token_123
            record_name: sub.example.com
          - name: test-ipv64
            protocol: ipv64
            auth_method: token
            token: test_token_456
            domain: example.com
          - name: test-dyndns2
            protocol: dyndns2
            url: https://updates.example.org/api/
            auth_method: basic
            username: testuser
            password: testpass
            hostname: test.example.com
        EOF
    
    - name: Test configuration loading
      run: |
        echo "🔧 Testing Configuration Loading"
        echo "================================"
        python -c "
        import yaml
        import sys
        sys.path.insert(0, '.')
        from update_dyndns import validate_config, create_provider
        
        # Load and validate config
        with open('config/config.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        print('Config loaded successfully')
        
        if validate_config(config):
            print('✅ Configuration validation passed')
        else:
            print('❌ Configuration validation failed')
            sys.exit(1)
        
        # Test provider creation
        for provider_config in config['providers']:
            try:
                provider = create_provider(provider_config)
                print(f'✅ Created {provider_config[\"name\"]}: {type(provider).__name__}')
            except Exception as e:
                print(f'❌ Failed to create {provider_config[\"name\"]}: {e}')
                sys.exit(1)
        
        print('🎉 All integration tests passed!')
        "

  security-test:
    runs-on: ubuntu-latest
    needs: test-providers
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        echo "🔒 Running Security Scan"
        echo "========================"
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
    
    - name: Check dependencies for known vulnerabilities
      run: |
        echo "🔍 Checking Dependencies for Vulnerabilities"
        echo "============================================="
        safety check || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: 7

  notify-results:
    runs-on: ubuntu-latest
    needs: [test-providers, test-coverage, integration-test, security-test]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "📊 TEST EXECUTION SUMMARY"
        echo "========================="
        echo "Provider Tests: ${{ needs.test-providers.result }}"
        echo "Coverage Tests: ${{ needs.test-coverage.result }}"
        echo "Integration Tests: ${{ needs.integration-test.result }}"
        echo "Security Tests: ${{ needs.security-test.result }}"
        echo ""
        
        if [[ "${{ needs.test-providers.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "🎉 ALL CRITICAL TESTS PASSED!"
          echo "Provider architecture is working correctly across all Python versions."
        else
          echo "⚠️ Some tests failed. Check the individual job outputs for details."
          exit 1
        fi
