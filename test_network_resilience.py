#!/usr/bin/env python3
"""
Test f√ºr die Network Resilience Features des DynDNS Docker Clients.
"""

import sys
import os
import tempfile
import yaml
import unittest
from unittest.mock import patch, MagicMock
import time

def test_resilient_ip_detection():
    """Test der resilienten IP-Erkennung."""
    print("=== Test: Resiliente IP-Erkennung ===")
    
    # Mock-Konfiguration
    test_config = {
        'ip_services': [
            'https://api.ipify.org',
            'https://ifconfig.me/ip',
            'https://icanhazip.com'
        ],
        'enable_interface_fallback': True,
        'interface': 'eth0',
        'network_retry_interval': 5,  # Kurz f√ºr Tests
        'max_failures_before_backoff': 2,
        'backoff_multiplier': 2.0,
        'max_wait_time': 60
    }
    
    try:
        # Import der Funktionen
        from update_dyndns import get_public_ip_with_fallback, get_current_ip_resilient, handle_no_ip_available
        
        # Test 1: Erfolgreiche IP-Erkennung
        print("Test 1: Erfolgreiche IP-Erkennung...")
        with patch('update_dyndns.get_public_ip') as mock_get_ip:
            mock_get_ip.side_effect = [None, "203.0.113.45"]  # Erster Service fehlschl√§gt, zweiter erfolgreich
            
            result = get_public_ip_with_fallback(test_config)
            assert result == "203.0.113.45", f"Erwartete IP: 203.0.113.45, erhalten: {result}"
            print("‚úÖ Erfolgreich - IP von Backup-Service ermittelt")
        
        # Test 2: Alle Services fehlschlagen
        print("Test 2: Alle Services fehlschlagen...")
        with patch('update_dyndns.get_public_ip') as mock_get_ip:
            mock_get_ip.return_value = None
            
            result = get_public_ip_with_fallback(test_config)
            assert result is None, f"Erwartete None, erhalten: {result}"
            print("‚úÖ Erfolgreich - Alle Services fehlgeschlagen wie erwartet")
        
        # Test 3: Backoff-Logik
        print("Test 3: Backoff-Logik...")
        consecutive_failures, wait_time = handle_no_ip_available(0, test_config)
        assert consecutive_failures == 1, f"Erwartete 1 Fehler, erhalten: {consecutive_failures}"
        assert wait_time == 5, f"Erwartete 5s Wartezeit, erhalten: {wait_time}"
        
        consecutive_failures, wait_time = handle_no_ip_available(2, test_config)
        assert consecutive_failures == 3, f"Erwartete 3 Fehler, erhalten: {consecutive_failures}"
        assert wait_time == 10, f"Erwartete 10s Wartezeit (Backoff), erhalten: {wait_time}"
        print("‚úÖ Erfolgreich - Backoff-Logik funktioniert")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Import-Fehler: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Test fehlgeschlagen: {e}")
        return False

def test_config_validation():
    """Test der erweiterten Konfigurationsvalidierung."""
    print("\n=== Test: Konfigurationsvalidierung ===")
    
    # Test-Konfiguration mit Netzwerk-Resilienz
    test_config = {
        'timer': 300,
        'loglevel': 'INFO',
        'ip_services': [
            'https://api.ipify.org',
            'https://ifconfig.me/ip'
        ],
        'network_retry_interval': 60,
        'max_failures_before_backoff': 5,
        'backoff_multiplier': 2.0,
        'max_wait_time': 600,
        'enable_interface_fallback': True,
        'providers': [
            {
                'name': 'test_provider',
                'protocol': 'dyndns2',
                'url': 'https://example.com/update',
                'hostname': 'test.example.com'
            }
        ]
    }
    
    try:
        # Validiere Konfiguration
        assert 'ip_services' in test_config, "ip_services fehlt"
        assert isinstance(test_config['ip_services'], list), "ip_services muss eine Liste sein"
        assert len(test_config['ip_services']) > 0, "ip_services darf nicht leer sein"
        
        # Validiere Netzwerk-Parameter
        assert test_config['network_retry_interval'] > 0, "network_retry_interval muss > 0 sein"
        assert test_config['max_failures_before_backoff'] > 0, "max_failures_before_backoff muss > 0 sein"
        assert test_config['backoff_multiplier'] >= 1.0, "backoff_multiplier muss >= 1.0 sein"
        assert test_config['max_wait_time'] > test_config['network_retry_interval'], "max_wait_time muss > network_retry_interval sein"
        
        print("‚úÖ Konfigurationsvalidierung erfolgreich")
        return True
        
    except AssertionError as e:
        print(f"‚ùå Validierungsfehler: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unerwarteter Fehler: {e}")
        return False

def test_integration_scenario():
    """Integrations-Test: Simuliert einen kompletten Netzwerkausfall-Szenario."""
    print("\n=== Test: Netzwerkausfall-Szenario ===")
    
    try:
        # Erstelle tempor√§re Konfiguration
        test_config = {
            'timer': 10,  # Kurz f√ºr Test
            'loglevel': 'INFO',
            'ip_services': ['https://api.ipify.org', 'https://ifconfig.me/ip'],
            'network_retry_interval': 2,
            'max_failures_before_backoff': 2,
            'backoff_multiplier': 2.0,
            'max_wait_time': 10,
            'enable_interface_fallback': True,
            'providers': []  # Keine Provider f√ºr Test
        }
        
        # Simuliere Szenario:
        # 1. Normale Funktion
        # 2. Netzwerkausfall
        # 3. Teilweise Wiederherstellung
        # 4. Vollst√§ndige Wiederherstellung
        
        from update_dyndns import get_current_ip_resilient, handle_no_ip_available
        
        print("Szenario 1: Normale Funktion...")
        with patch('update_dyndns.get_public_ip') as mock_get_ip:
            mock_get_ip.return_value = "203.0.113.45"
            result = get_current_ip_resilient(test_config)
            assert result == "203.0.113.45", "Normale Funktion sollte funktionieren"
            print("‚úÖ Normale Funktion OK")
        
        print("Szenario 2: Kompletter Netzwerkausfall...")
        with patch('update_dyndns.get_public_ip') as mock_get_ip, \
             patch('update_dyndns.get_interface_ipv4') as mock_interface:
            mock_get_ip.return_value = None
            mock_interface.side_effect = Exception("Interface nicht verf√ºgbar")
            
            result = get_current_ip_resilient(test_config)
            assert result is None, "Bei komplettem Ausfall sollte None zur√ºckgegeben werden"
            print("‚úÖ Kompletter Ausfall korrekt behandelt")
        
        print("Szenario 3: Interface-Fallback...")
        with patch('update_dyndns.get_public_ip') as mock_get_ip, \
             patch('update_dyndns.get_interface_ipv4') as mock_interface:
            mock_get_ip.return_value = None
            mock_interface.return_value = "192.168.1.100"
            
            result = get_current_ip_resilient(test_config)
            assert result == "192.168.1.100", "Interface-Fallback sollte funktionieren"
            print("‚úÖ Interface-Fallback OK")
        
        # Test Backoff-Verhalten
        print("Szenario 4: Backoff-Verhalten...")
        failures = 0
        wait_times = []
        
        for i in range(5):
            failures, wait_time = handle_no_ip_available(failures, test_config)
            wait_times.append(wait_time)
        
        # Erste 2 Versuche: normale Wartezeit
        assert wait_times[0] == 2, f"Erste Wartezeit sollte 2s sein, war {wait_times[0]}"
        assert wait_times[1] == 2, f"Zweite Wartezeit sollte 2s sein, war {wait_times[1]}"
        
        # Ab dem 3. Versuch: Backoff
        assert wait_times[2] == 4, f"Dritte Wartezeit sollte 4s sein (Backoff), war {wait_times[2]}"
        assert wait_times[3] == 8, f"Vierte Wartezeit sollte 8s sein (Backoff), war {wait_times[3]}"
        
        print("‚úÖ Backoff-Verhalten korrekt")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Integrations-Test fehlgeschlagen: {e}")
        return False

def main():
    """F√ºhrt alle Network Resilience Tests aus."""
    print("=== DynDNS Network Resilience Tests ===\n")
    
    tests = [
        ("Resiliente IP-Erkennung", test_resilient_ip_detection),
        ("Konfigurationsvalidierung", test_config_validation),
        ("Integrations-Szenario", test_integration_scenario)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå {test_name} Exception: {e}")
            results.append(False)
    
    print(f"\n=== Test-Ergebnisse ===")
    passed = sum(results)
    total = len(results)
    
    print(f"Bestanden: {passed}/{total}")
    
    if passed == total:
        print("üéâ Alle Network Resilience Tests bestanden!")
        print("Das System ist bereit f√ºr production-grade Netzwerk-Resilienz!")
        return 0
    else:
        print("‚ùå Einige Tests fehlgeschlagen. Bitte Implementierung pr√ºfen.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
